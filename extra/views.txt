
def profilePage(request, pk, profile):
    objects = Counsellor.objects.all()
    obj_ach = Achievement.objects.all()
    obj_avai = Availability.objects.all()
    obj_exp = Experience.objects.all()
    obj_the = Therapy.objects.all()
    obj_spe = Specialities.objects.all()
    request.session['pk'] = pk
    students = Students.objects.all()
    profile = 'red'
    return render(request, 'app/profile.html', {
        'students': students,
        'objects': objects,
        'pk': pk,
        'profile': profile,
        'obj_ach': obj_ach,
        'obj_avai': obj_avai,
        'obj_exp': obj_exp,
        'obj_the': obj_the,
        'obj_spe': obj_spe,

    })



def indexPage(request, pk, home):
    objects = Counsellor.objects.all()
    request.session['pk'] = pk
    students = Students.objects.all()
    home = 'red'
    return render(request, 'app/index.html', {
        'objects': objects,
        'students': students,
        'pk': pk,
        'home': home,
    })


def popupPage(request, object_user_id):
    objects = Counsellor.objects.all()
    pk = request.session['pk']
    user_id = object_user_id
    students = Students.objects.all()
    home = 'red'
    return render(request, 'app/popup.html', {
        'objects': objects,
        'pk': pk,
        'home': home,
        'user_id': user_id,
        'students': students,
    })



def speciality_add(request, spe_id):
    pk = request.session['pk']

    return redirect('counsellingUrls:dashboardPage', pk)


def speciality_del(request, spe_id):
    pk = request.session['pk']
    spec = Specialities.objects.get(id=spe_id)
    spec.delete()
    return redirect('counsellingUrls:dashboardPage', pk)



def therapy_add(request, the_id):
    pk = request.session['pk']

    return redirect('counsellingUrls:dashboardPage', pk)


def therapy_del(request, the_id):
    pk = request.session['pk']
    ther = Therapy.objects.create(id=the_id)
    ther.delete()
    return redirect('counsellingUrls:dashboardPage', pk)



def education_add(request, ed_id):
    pk = request.session['pk']

    return redirect('counsellingUrls:dashboardPage', pk)


def education_del(request, ed_id):
    pk = request.session['pk']
    edu = Education.objects.get(id=ed_id)
    edu.delete()
    return redirect('counsellingUrls:dashboardPage', pk)


def experience_add(request, exp_id):
    pk = request.session['pk']

    return redirect('counsellingUrls:dashboardPage', pk)


def experience_del(request, exp_id):
    pk = request.session['pk']
    expe = Experience.objects.get(id=exp_id)
    expe.delete()
    return redirect('counsellingUrls:dashboardPage', pk)



def achievement_del(request, ach_id):
    pk = request.session['pk']
    achieve = Achievement.objects.get(id=ach_id)
    achieve.delete()
    return redirect('counsellingUrls:dashboardPage', pk)



def achievement_add(request, ach_id):
    pk = request.session['pk']

    achievements = Achievement.objects.all()

    achieve = Achievement.objects.filter(id=ach_id)
    if achieve.exists():
        try:
            ach_id = int(ach_id)
            ach_id = ach_id + 1
            Achievement.objects.create(id=ach_id)
            request.session['ach_id'] = ach_id

        except:
            pass

    else:
        pass
    return redirect('counsellingUrls:dashboardPage', pk)



def search(request, pk):
    profile = 'red'
    pk = request.session['pk']
    students = Students.objects.all()

    search = ''

    if request.method == 'GET':
        search = request.GET.get('search')
        post = Counsellor.objects.all()
        objects = Counsellor.objects.all()
        if search:
            search = request.GET.get('search').split(' ')
            for u in range(len(search)):
                l_search = search[u]

                post = Counsellor.objects.filter(
                    Q(firstName__icontains=l_search) | Q(lastName__icontains=l_search) | Q(title__icontains=l_search))

        else:
            search = ''
        pk = request.session['pk']
        return render(request, 'app/result.html', {
            'post': post,
            'search': search,
            'pk': pk,
            'profile': profile,
            'objects': objects,
            'students': students,

        })
    return redirect('counsellingUrls:profilePage', pk)

 # mylist_n = [j for i in subTime for j in i]
            # some = []
            # for u in range(len(subTime)):
            #     l_time = subTime[u]
            #     res = l_time[-1]
            #     ser = l_time[0]
            #     some.extend([l_time, ser, res])

            # for u in range(len(some)):
            #     if (u % 2) == 0:
            #         f_time = some[u]
            #     else:
            #         g_time = some[u]
            #         mylist_n.append(g_time)














